'use client'

import { useState, useEffect } from 'react'
import { supabase, Activity } from '@/lib/supabase'

export default function ActivitiesPage() {
  const [activities, setActivities] = useState<Activity[]>([])
  const [loading, setLoading] = useState(true)
  const [selectedCategory, setSelectedCategory] = useState<string>('all')
  const [selectedAge, setSelectedAge] = useState<string>('all')

  const categories = [
    { id: 'all', title: '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', emoji: 'üéØ' },
    { id: 'creativity', title: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', emoji: 'üé®' },
    { id: 'active_games', title: '–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã', emoji: 'üèÉ‚Äç‚ôÇÔ∏è' },
    { id: 'cooking', title: '–ö—É–ª–∏–Ω–∞—Ä–∏—è', emoji: 'üë®‚Äçüç≥' },
    { id: 'experiments', title: '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã', emoji: 'üî¨' },
  ]

  const ageGroups = [
    { id: 'all', title: '–í—Å–µ –≤–æ–∑—Ä–∞—Å—Ç—ã' },
    { id: '3-5', title: '3-5 –ª–µ—Ç' },
    { id: '6-8', title: '6-8 –ª–µ—Ç' },
    { id: '9-12', title: '9-12 –ª–µ—Ç' },
    { id: '13-17', title: '13-17 –ª–µ—Ç' },
    { id: '18+', title: '18+ –ª–µ—Ç' },
  ]

  useEffect(() => {
    async function fetchActivities() {
      setLoading(true)
      try {
        let query = supabase.from('activities').select('*')

        if (selectedCategory !== 'all') {
          query = query.eq('category', selectedCategory)
        }

        if (selectedAge !== 'all') {
          query = query.contains('age_groups', [selectedAge])
        }

        const { data, error } = await query.order('created_at', { ascending: false })

        if (error) throw error
        setActivities(data || [])
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error)
      } finally {
        setLoading(false)
      }
    }

    fetchActivities()
  }, [selectedCategory, selectedAge])

  const getDurationText = (minutes: number) => {
    if (minutes <= 20) return `${minutes} –º–∏–Ω ‚ö°`
    if (minutes <= 45) return `${minutes} –º–∏–Ω üïê`
    return `${minutes} –º–∏–Ω üïí`
  }

  const getDifficultyEmoji = (difficulty: string) => {
    switch (difficulty) {
      case 'easy': return 'üòä'
      case 'medium': return 'ü§î'
      case 'hard': return 'üò§'
      default: return 'üòä'
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <div className="max-w-6xl mx-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">
            üéØ –ö–∞—Ç–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
          </h1>
          <p className="text-gray-600">
            –ù–∞–π–¥–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —Å–≤–æ–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞!
          </p>
        </div>

        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <div className="bg-white rounded-xl shadow-sm p-6 mb-6">
          <div className="grid md:grid-cols-2 gap-4">
            {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ö–∞—Ç–µ–≥–æ—Ä–∏—è
              </label>
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                {categories.map((cat) => (
                  <option key={cat.id} value={cat.id}>
                    {cat.emoji} {cat.title}
                  </option>
                ))}
              </select>
            </div>

            {/* –í–æ–∑—Ä–∞—Å—Ç */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –í–æ–∑—Ä–∞—Å—Ç
              </label>
              <select
                value={selectedAge}
                onChange={(e) => setSelectedAge(e.target.value)}
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                {ageGroups.map((age) => (
                  <option key={age.id} value={age.id}>
                    {age.title}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
        {loading ? (
          <div className="text-center py-12">
            <div className="text-2xl mb-2">‚è≥</div>
            <p className="text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...</p>
          </div>
        ) : (
          <>
            <div className="mb-4">
              <p className="text-gray-600">
                –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: <span className="font-semibold">{activities.length}</span>
              </p>
            </div>

            {/* –°–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π */}
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
              {activities.map((activity) => (
                <div
                  key={activity.id}
                  className="bg-white rounded-xl shadow-sm hover:shadow-md transition-shadow p-6 border border-gray-100"
                >
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                  <div className="flex items-start justify-between mb-3">
                    <h3 className="font-semibold text-lg text-gray-800 line-clamp-2">
                      {activity.title}
                    </h3>
                    {activity.premium && (
                      <span className="bg-yellow-100 text-yellow-800 text-xs px-2 py-1 rounded-full ml-2">
                        ‚≠ê Premium
                      </span>
                    )}
                  </div>

                  {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
                  <p className="text-gray-600 text-sm mb-4 line-clamp-2">
                    {activity.short_description}
                  </p>

                  {/* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ */}
                  <div className="flex items-center justify-between text-sm text-gray-500 mb-4">
                    <span>{getDurationText(activity.duration_minutes)}</span>
                    <span>{getDifficultyEmoji(activity.difficulty)} {activity.difficulty}</span>
                  </div>

                  {/* –ú–∞—Ç–µ—Ä–∏–∞–ª—ã */}
                  {activity.materials && activity.materials.length > 0 && (
                    <div className="mb-4">
                      <p className="text-xs text-gray-500 mb-1">–ü–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:</p>
                      <div className="flex flex-wrap gap-1">
                        {activity.materials.slice(0, 3).map((material, idx) => (
                          <span
                            key={idx}
                            className="bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded"
                          >
                            {material}
                          </span>
                        ))}
                        {activity.materials.length > 3 && (
                          <span className="text-xs text-gray-500">
                            +{activity.materials.length - 3}
                          </span>
                        )}
                      </div>
                    </div>
                  )}

                  {/* –ö–Ω–æ–ø–∫–∞ */}
                  <button className="w-full bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-lg transition-colors text-sm font-medium">
                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                  </button>
                </div>
              ))}
            </div>

            {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
            {activities.length === 0 && (
              <div className="text-center py-12">
                <div className="text-4xl mb-4">üîç</div>
                <h3 className="text-xl font-semibold text-gray-700 mb-2">
                  –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                </h3>
                <p className="text-gray-500">
                  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                </p>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  )
}